version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
#    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.4
#    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"

    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#      KAFKA_NODE_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
#      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_OPTS: -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9997 -Dcom.sun.management.jmxremote.rmi.port=9997 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
#      KAFKA_PROCESS_ROLES: 'broker,controller'
#      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

#  kafka2:
#    image: confluentinc/cp-kafka:7.4.4
#    #    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - "9093:9093"
#      - "9998:9998"
#    hostname: kafka2
#    container_name: kafka2
#    environment:
#      KAFKA_BROKER_ID: 2
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
##      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_JMX_PORT: 9998
#      KAFKA_JMX_HOSTNAME: kafka2
##      KAFKA_JMX_OPTS: -Djava.rmi.server.hostname=kafka2 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.rmi.port=9999 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
#  #      KAFKA_PROCESS_ROLES: 'broker,controller'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092, kafka2:29093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on:
      - kafka
#      - kafka2
#    links:
#      - kafka
#      - kafka2
#      - zookeeper

#  kafka-lag-exporter:
#    image: seglo/kafka-lag-exporter
#    networks:
#      - jpoint_network
#    hostname: kafka-lag-exporter
#    container_name: kafka-lag-exporter
#    ports:
#      - 8000:8000
#    volumes:
#      - C:\Docker\jpoint\lag-exporter\application.conf:/opt/docker/conf/application.conf
#      - C:\Docker\jpoint\lag-exporter\logback.xml:/opt/docker/conf/logback.xml
#
#  cadvisor:
#    image: gcr.io/cadvisor/cadvisor:latest
#    networks:
#      - jpoint_network
#    hostname: cadvisor
#    container_name: cadvisor
#    volumes:
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#    ports:
#      - 8001:8080
#
#  prometheus:
#    image: docker.io/prom/prometheus:latest
#    networks:
#      - jpoint_network
#    hostname: prometheus
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - C:\Docker\jpoint\prometheus\prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
#    image: grafana/grafana:6.7.2
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - 'grafana_data:/var/lib/grafana'
#      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
#    restart: unless-stopped
#    expose:
#      - '3000'
#    networks:
#      - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"

  #  kafka-init-topics:
#    image: confluentinc/cp-kafka:7.4.4
#    volumes:
#      - ./data/message.json:/data/message.json
#    depends_on:
#      - kafka
#    command: "bash -c 'echo Waiting for Kafka to be ready... && \
#                 cub kafka-ready -b kafka:29092 1 30 && \
#                 kafka-topics --create --topic users --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
#                 kafka-topics --create --topic messages --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka:29092 && \
#                 kafka-console-producer --bootstrap-server kafka:29092 --topic users < /data/message.json'"

  postgres:
    image: 'postgres:latest'
#    image: postgres:14-alpine
    container_name: postgres
    volumes:
      - 'postgres_db:/var/lib/postgresql/data'
    depends_on:
      - zookeeper
    environment:
      - 'POSTGRES_DB=person_db'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=user'
    ports:
      - '6540:5432'

  producer:
    build: ./producer
    container_name: producer
#      context: .
#      dockerfile: producer/Dockerfile
    ports:
      - '9090:9090'
    depends_on:
      - kafka
#      - kafka2
#    links:
#      - kafka-ui

  consumer:
    build: ./consumer
    container_name: consumer
    ports:
      - '9091:9091'
    depends_on:
      - producer
      - postgres
    environment:
      - 'DB_NAME=person_db'
      - 'POSTGRES_USER=user'
      - 'POSTGRES_PASSWORD=secret'
      - 'DB_HOST=postgres'
      - 'DB_PORT=5432'
#    links:
#      - kafka-ui

volumes:
  postgres_db:
  grafana_data: